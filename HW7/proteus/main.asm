.MODEL SMALL
.STACK 64
.DATA
    NUMBER_TEN  DB 10
    WHICH_DIGIT  DB 0
	SEC_INP_DIG  DB 0
	FIRST_INP_DIG  DB 0
	FINAL_NUMBER_N DB 0

	ROW0_KEYS DB 1, 2, 3
	ROW1_KEYS DB 4, 5, 6
	ROW2_KEYS DB 7, 8, 9
	ROW3_KEYS DB 0, 0, 0

	PORT_A EQU 0C8H
	PORT_B EQU 0CAH
	PORT_C EQU 0CCH
	CON_REG EQU 0CEH
.CODE  

MAIN          PROC FAR
	MOV AX, @DATA
	MOV DS, AX
PART_1 :
	MOV AL, 82H            ; SET THE CONTROL WORD = 1000 0010
	OUT CON_REG, AL     
SET_ZERO_AND_START :	 
    MOV AL, 00H   
	OUT PORT_A, AL          ; SET ROWS AS ZERO
WAIT_FOR_KEY :		  
    IN AL, PORT_B           ; READ COLS 
	AND AL, 07H    
	CMP AL, 07H    
	JZ WAIT_FOR_KEY         ;KEY PRESSED
	CALL CREATE_DELAY       ;DEBOUNCING
	IN AL, PORT_B	        ; READ COLS 
	AND AL, 07H    
	CMP AL, 07H  
	JZ WAIT_FOR_KEY         ;NO COL SET AS ZERO 
FIRST_ROW :		    
    MOV AL, 0FEH            ; SET FIRST ROW ZERO
	OUT PORT_A, AL          
	IN AL, PORT_B           ; READ COLS 
	AND AL, 07H             
	CMP AL, 07H             ; AGE YEKI AZ COL HA 0 SHODE BASHE 
	JZ SEC_ROW	        
	LEA SI, ROW0_KEYS   
	JMP FIND_COL_NUMBER     
SEC_ROW :		 
    MOV AL, 0FDH   
	OUT PORT_A, AL         
	IN AL, PORT_B          
	AND AL, 07H            
	CMP AL, 07H            
	JZ THIRD_ROW	       
	LEA SI, ROW1_KEYS      
	JMP FIND_COL_NUMBER    
THIRD_ROW :		  
    MOV AL, 0FBH   
	OUT PORT_A, AL          
	IN AL, PORT_B           
	AND AL, 07H             
	CMP AL, 07H             
	JZ FOURTH_ROW	        
	LEA SI, ROW2_KEYS       
	JMP FIND_COL_NUMBER     
FOURTH_ROW :		  
    MOV AL, 0F7H   
	OUT PORT_A, AL     
	IN AL, PORT_B      
	AND AL, 07H    
	CMP AL, 07H    
	JZ WAIT_FOR_KEY	     
	LEA SI, ROW3_KEYS  
	JMP FIND_COL_NUMBER     
FIND_COL_NUMBER :		  
    SHR AL, 1
	JNC KEY_FOUNDED      
	INC SI		 
	JMP FIND_COL_NUMBER 	 
KEY_FOUNDED :		  
    MOV AL, [SI] 
    MOV BH, WHICH_DIGIT  
	CMP BH, 1
	JZ SEC_DIG_ENTERED
	MOV FIRST_INP_DIG, AL	 
	MOV BH, 1
    MOV WHICH_DIGIT, BH
	OUT PORT_C, AL 
	JMP SET_ZERO_AND_START
SEC_DIG_ENTERED :	          
    MOV SEC_INP_DIG, AL
	MOV AL, FIRST_INP_DIG
	MUL NUMBER_TEN
	ADD AL, SEC_INP_DIG
    ;FINAL NUMBER(N) CACULATED 
    ;SHOW N
SHOW_FINAL_NUMBER :
	MOV FINAL_NUMBER_N, AL
	OUT PORT_C, AL          ;SHOW FINAL NUMBER IN 7 SEGS 
	
    
PART_2 :
	MOV CL, AL              ;SAVE N
	MOV AX, 2800h           ;CHANGE DATA SEGMENT (DS) REGISTER = 2800h 
	MOV DS, AX

	MOV AL, CL
	; SAVE (N) IN NEW DATA SEGMENT 
	MOV DI, 500
	MOV [DI], AL
	MOV DI, 0
	
    ; FOR(I=2; I < N;I++)
	MOV DL, 02H             ; ITERATOR = 2
FIND_ALL_PRIMES_AND_CALC_SUM :	  
    MOV AL, DL              ; MOVE DL IN AL  AS PARAMTER FOR   IS_PRIME
	CALL IS_PRIME
	CMP BH, 02H             ;TEDADE MAQSOMALAYHE HAYEY ADDE BISHTAR AZ 2 HAST
	JAE CURRENT_NUMBER_ISNOT_PRIME        ; CURRENT NUMBER IS'T PRIME !
	MOV DH, 00H             ; IF CURRENT NUMBER IS PRIME MUST SAVE IT AT MEM 
	MOV [DI], DX
	INC DI
	INC DI
ADD_TO_RESULT :
	MOV BX, DI          
	MOV DI, 1000H
	MOV AX, [DI]
	MOV DH, 00H
	ADD AX, DX
	MOV [DI], AX
	MOV DI, BX
CURRENT_NUMBER_ISNOT_PRIME :			  
    MOV BX, DI
	MOV DI, 500
	MOV AL, [DI]
	MOV DI, BX
	INC DL
	CMP DL, AL
	JB FIND_ALL_PRIMES_AND_CALC_SUM
	
	MOV DI, 0
SHOW_ALL_PRIME_NUMBERS :		   
    MOV AX, [DI]
	CMP AX, 00H                 ;END OF PRIME NUMBERS IN MEM 
	JE SET_7SEGS_ZERO
	CALL SHOW_CURRENT_NUMBER
	INC DI
	INC DI
	JMP SHOW_ALL_PRIME_NUMBERS

			   
SET_7SEGS_ZERO :	
    ;SER 7SEGS ZERO
    MOV AL, 00H
	OUT  0CCH , AL   
	  
	MAIN ENDP 
			  
CREATE_DELAY		  PROC NEAR
	MOV CX, 6500
DEL_LOOP :		  
    LOOP DEL_LOOP
	RET
	CREATE_DELAY ENDP
			  
	  


; INP NUMBER IN DL
IS_PRIME	  PROC NEAR  
    MOV AL, DL                 
	MOV BH, 00H
	MOV CL, 02H                     ; START ITERATOR IS 2
	MOV AH, 00H                     ; CLEAR AH FOR DIV 
PRIME_CHECKER_LOOP :	    
    DIV CL  
	CMP AH,00H                      ; CHECK REM IS ZERO?
	JNE NEXT_ITR    
	INC BH                          ; TEDADE MQSOMALYH HA
NEXT_ITR :                  
    CMP BH, 02H    	        
	JAE IS_NOT_PRIME                  	 
	INC CL                              
	MOV AH, 00H                     ; CLEAR AH FOR DIV 
	MOV AL, DL                  
	CMP CL, AL                      ; IF ITERATOR == INPUT NUMBER [END OF LOOP]
	JBE PRIME_CHECKER_LOOP                      
	RET
IS_NOT_PRIME :		 
	RET
	IS_PRIME ENDP
	
TIMERR  PROC NEAR
    MOV AL, 70H     
	OUT 0E6H, AL
	MOV AL, 00H     
	OUT 0E2H, AL   
	MOV AL, 80H
	OUT 0E2H, AL
	MOV AL, 0FFH   
	OUT 0C8H, AL 
TIMER_LOOP :  
    IN AL, 0CAH
	CMP AL, 0FFH
	JNZ TIMER_LOOP
	MOV CH, AL
	ADD CL, 1
	MOV AL, CL
	OUT 0CCH, AL
	MOV AL, CH
    RET 
    TIMERR ENDP

SHOW_CURRENT_NUMBER  PROC NEAR
	MOV CL, 10
	DIV CL
	MOV BL, AH
    MOV CL, 4
	SHL AL, CL
	OR AL,BL 
	OUT  0CCH , AL
	CALL TIMERR
	RET 
	SHOW_CURRENT_NUMBER ENDP
	END
    END MAIN

